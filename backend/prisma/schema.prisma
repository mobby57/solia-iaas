generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  description String?
  kycConfig   KYCFieldConfig[]
  users       User[]
  tenantId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model KYCFieldConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  fieldName String
  fieldType String
  required  Boolean
  options   Json?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  email               String                @unique
  password            String
  name                String
  roleId              String
  role                Role                  @relation(fields: [roleId], references: [id])
  organizationId      String?
  organization        Organization?         @relation(fields: [organizationId], references: [id])
  kycData             Json?
  donations           Donation[]
  tasks               Task[]
  comments            Comment[]
  tenantId            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String?
  updatedBy           String?
}

model Organization {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  users               User[]
  donations           Donation[]
  missions            Mission[]
  documents           Document[]
  tenantId            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String?
  updatedBy           String?
}

model Mission {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           String
  startDate      DateTime
  endDate        DateTime
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  donations      Donation[]
  tasks          Task[]
  tenantId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?
  documents      Document[]
}

model Task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  missionId String
  mission   Mission  @relation(fields: [missionId], references: [id])
  date      DateTime
  status    String
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

model Donation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  date           DateTime
  donorId        String
  donor          User         @relation(fields: [donorId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  missionId      String?
  mission        Mission?     @relation(fields: [missionId], references: [id])
  status         String?
  comment        String?
  tenantId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?
}

model Document {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  name           String
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  missionId      String?
  mission        Mission?      @relation(fields: [missionId], references: [id])
  tenantId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String?
  updatedBy      String?
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  targetId   String
  targetType String
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  updatedBy  String?
}

model Tag {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  label      String
  color      String?
  targetId   String
  targetType String
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  updatedBy  String?
}
